<%--
 * == 개정이력(Modification Information) ==
 * 수정일	수정자	수정내용
 * ========================================
 * 250705	서경덕	최초 생성
--%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib uri="jakarta.tags.core" prefix="c"%>

<title>LCMS 강의평가 폼 관리</title>
<link rel="stylesheet" href="/dist/assets/css/bodyFormat.css">

<h4>강의 평가</h4>
<style>
body {
	font-family: Arial, sans-serif;
	margin: 20px;
	padding: 0;
	background-color: #f4f4f4;
	color: #333;
}

.container {
	max-width: 1000px; /* 기존 800px에서 1000px로 확장 */
	margin: 0 auto;
	background-color: #fff;
	padding: 30px;
	border-radius: 8px;
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

h1, h2 {
	color: #0056b3;
	text-align: center;
}

.form-section {
	margin-bottom: 30px;
	padding: 20px;
	border: 1px solid #ddd;
	border-radius: 5px;
	background-color: #f9f9f9;
}

.form-section label {
	display: inline-block; /* 레이블이 텍스트와 같은 줄에 오도록 변경 */
	width: 120px; /* 레이블 너비 고정 */
	margin-bottom: 8px;
	font-weight: bold;
	vertical-align: middle; /* 세로 정렬 */
}

.form-section input[type="text"] {
	width: calc(100% - 250px); /* 레이블과 버튼 공간 확보 후 입력 필드 너비 조정 */
	padding: 10px;
	margin-bottom: 10px;
	border: 1px solid #ccc;
	border-radius: 4px;
	box-sizing: border-box;
	display: inline-block;
	vertical-align: middle; /* 세로 정렬 */
}

.form-section button {
	padding: 10px 15px;
	background-color: #007bff;
	color: white;
	border: none;
	border-radius: 4px;
	cursor: pointer;
	font-size: 14px;
	margin-left: 5px;
	vertical-align: middle; /* 세로 정렬 */
}

.form-section button.delete-btn {
	background-color: #dc3545;
}

.form-section button:hover {
	opacity: 0.9;
}

.question-item {
	display: flex; /* Flexbox 유지 */
	align-items: center;
	margin-bottom: 15px;
	background-color: #e9ecef;
	padding: 10px;
	border-radius: 4px;
}

.question-item label {
	flex-shrink: 0; /* 레이블이 줄어들지 않도록 설정 */
	width: auto; /* 고정 너비 해제, 내용에 따라 유연하게 */
	margin-right: 10px;
}

.question-item input[type="text"] {
	flex-grow: 1; /* 입력 필드가 남은 공간을 모두 차지하도록 */
	margin-bottom: 0;
	margin-right: 10px;
	width: auto; /* 기존 너비 설정 무시 */
}

.options-list {
	list-style: none;
	padding: 0;
	display: flex;
	justify-content: space-around;
	margin-top: 15px;
	padding-top: 10px;
	border-top: 1px solid #eee;
}

.options-list li {
	background-color: #e2f0cb;
	padding: 8px 12px;
	border-radius: 4px;
	font-weight: bold;
	color: #28a745;
}

.add-question-section {
	margin-top: 20px;
	padding-top: 20px;
	border-top: 1px dashed #ddd;
}

.add-question-section input[type="text"] {
	width: calc(100% - 150px); /* 추가 질문 입력 필드 너비 조정 */
}

.add-question-section button {
	background-color: #28a745;
}
</style>

<div class="container">

	<div class="form-section">
		<h2>강의평가 질문 목록 및 수정</h2>


		<div id="questionList">
			<div class="question-item">
				<label>강의평가 1.</label> <input type="text"
					value="나는 수업활동(출석, 과제수행 등)에 성실하게 참여하였다." readonly>
				<button class="edit-btn">수정</button>
				<button class="delete-btn">삭제</button>
			</div>
		</div>

		<div class="add-question-section">
			<h3>새 강의평가 질문 추가</h3>
			<input type="text" id="newQuestionInput" placeholder="새로운 질문을 입력하세요.">
			<button id="addQuestionBtn">질문 추가</button>
		</div>

		<ul class="options-list">
			<li>매우만족</li>
			<li>만족</li>
			<li>보통</li>
			<li>불만족</li>
			<li>매우불만족</li>
		</ul>
		<p>※ 모든 강의평가 질문에 대해 위의 5가지 선지가 동일하게 적용됩니다.</p>
	</div>
</div>

<script>
        document.addEventListener('DOMContentLoaded', function() {
            const questionList = document.getElementById('questionList');
            const addQuestionBtn = document.getElementById('addQuestionBtn');
            const newQuestionInput = document.getElementById('newQuestionInput');

            // Function to enable editing
            questionList.addEventListener('click', function(event) {
                if (event.target.classList.contains('edit-btn')) {
                    const inputField = event.target.previousElementSibling;
                    if (event.target.textContent === '수정') {
                        inputField.readOnly = false;
                        inputField.focus();
                        event.target.textContent = '저장';
                        event.target.style.backgroundColor = '#17a2b8'; // Change color to indicate 'save'
                    } else {
                        // Here you would typically send the updated question to the server
                        alert('질문이 수정되었습니다: ' + inputField.value);
                        inputField.readOnly = true;
                        event.target.textContent = '수정';
                        event.target.style.backgroundColor = '#007bff'; // Revert color
                    }
                } else if (event.target.classList.contains('delete-btn')) {
                    if (confirm('이 질문을 정말 삭제하시겠습니까?')) {
                        event.target.closest('.question-item').remove();
                        // Here you would typically send a request to the server to delete the question
                        alert('질문이 삭제되었습니다.');
                        // Re-index questions if necessary (e.g., "강의평가 1", "강의평가 2")
                        updateQuestionLabels();
                    }
                }
            });

            // Function to add a new question
            addQuestionBtn.addEventListener('click', function() {
                const newQuestionText = newQuestionInput.value.trim();
                if (newQuestionText) {
                    const newQuestionItem = document.createElement('div');
                    newQuestionItem.classList.add('question-item');
                    newQuestionItem.innerHTML = `
                        <label>강의평가 ${questionList.children.length + 1}.</label>
                        <input type="text" value="${newQuestionText}" readonly>
                        <button class="edit-btn">수정</button>
                        <button class="delete-btn">삭제</button>
                    `;
                    questionList.appendChild(newQuestionItem);
                    newQuestionInput.value = '';
                    alert('새로운 질문이 추가되었습니다.');
                    // Here you would typically send the new question to the server
                } else {
                    alert('추가할 질문 내용을 입력해주세요.');
                }
            });

            // Function to update question labels after add/delete
            function updateQuestionLabels() {
                const items = questionList.querySelectorAll('.question-item');
                items.forEach((item, index) => {
                    item.querySelector('label').textContent = `강의평가 ${index + 1}.`;
                });
            }
        });
    </script>