package kr.or.ddit.pfcp.student.certificate.controller;

import java.io.IOException;
import java.io.OutputStream;
import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.servlet.http.HttpServletResponse;
import kr.or.ddit.pfcp.common.service.AtchFileService;
import kr.or.ddit.pfcp.common.service.FileRefService;
import kr.or.ddit.pfcp.common.vo.AtchFileVO;
import kr.or.ddit.pfcp.common.vo.CertificateInfoVO;
import kr.or.ddit.pfcp.common.vo.FileRefVO;
import kr.or.ddit.pfcp.common.vo.ProgramCertIssueVO;
import kr.or.ddit.pfcp.common.vo.ProgramCertReqVO;
import kr.or.ddit.pfcp.common.vo.ProgramVO;
import kr.or.ddit.pfcp.student.certificate.service.CertificateRequestResult;
import kr.or.ddit.pfcp.student.certificate.service.StudentCertificateService;
import kr.or.ddit.validate.utils.ErrorsUtils;

/**
 * 목록 조회 없음. 상세 조회만 있음.
 * 
 * @author seokyungdeok
 * @since 250630
 * 
 * << 개정이력(Modification Information) >>
 * 수정일	|	수정자	|	수정 내용
 * -----------------------------------------------
 * 250630	|	서경덕	|	최초 생성
 */
@Controller
@RequestMapping("/student/certificate")
public class StudentCertificateController {
	@Autowired
	private StudentCertificateService studentCertificateService;
	
	@Autowired
	private FileRefService fileRefService;
	
	@Autowired
	private AtchFileService atchFileService;
	
	static final String MODEL_NAME = "programCertReq";
	
	@Autowired
	private ErrorsUtils errorsUtils;
	
	@ModelAttribute(MODEL_NAME)
	public ProgramCertReqVO programCertReq() {
		return new ProgramCertReqVO();
	}
	
	@GetMapping("{certCode}.do")
	public String certificatePage(
	    @PathVariable String certCode,
	    Principal principal,
	    Model model
	) {
	    String userNo = principal.getName();

	    switch (certCode) {
	        case "CERT001":
	        	
	            return "pfcp/student/certificate/enrollmentCertificate";
	            
	        case "CERT002":
	        	Map<String, Object> paramMap = new HashMap<>();
	    
	        	paramMap.put("certCode", certCode);
	        	
	        	CertificateInfoVO certificateInfo = studentCertificateService.readCertificateInfo(paramMap);
	        	
	        	model.addAttribute("certificateInfo", certificateInfo);
	        	
	            return "pfcp/student/certificate/graduationCertificate";
	            
	        case "CERT003":
	        	
	            return "pfcp/student/certificate/transcriptCertificate";
	            
	        case "CERT004":
	        	
	            return "pfcp/student/certificate/scholarshipCertificate";
	            
	        default:
	            throw new IllegalArgumentException("지원하지 않는 증명서 코드입니다: " + certCode);
	    }
	}
	
	@GetMapping("suryoCertificate.do")
	public String suryoCertificate(
		@ModelAttribute(MODEL_NAME) ProgramCertReqVO programCertReq,
		Principal principal,
		@RequestParam String no,
		BindingResult errors,
		RedirectAttributes redirectAttributes
	) {
		if (errors.hasErrors()) {
	        redirectAttributes.addFlashAttribute("errors", errorsUtils.errorsToMap(errors));
	        return "redirect:/student/certificate/programList.do";
	    }
		
	    String userNo = principal.getName();
	    
	    CertificateRequestResult result = studentCertificateService.requestCertificate(no, userNo);

	    switch (result) {
	    	case ALREADY_APPLY:
	    		redirectAttributes.addFlashAttribute("message", "이미 수료증 발급 신청이 완료되었습니다.");
	            break;
	    
	        case ALREADY_ISSUED:
	            redirectAttributes.addFlashAttribute("message", "이미 수료증이 발급되었습니다.");
	            break;
	            
	        case NOT_COMPLETED:
	            redirectAttributes.addFlashAttribute("message", "이수가 완료되지 않았습니다.");
	            break;
	            
	        case SUCCESS:
	            redirectAttributes.addFlashAttribute("message", "수료증 신청이 완료되었습니다.");
	            break;
	    }
		
		return "redirect:/student/program/myParticipationDetail.do?no=" + no;
	}
	
	
	/**
	 * 증명서 발급 내역 조회
	 * 
	 * @return
	 */
	@GetMapping("issuedCertificateHistory.do")
	public String issuedCertificateHistory(
		Principal principal,
		Model model
	) {
		String userNo = principal.getName();
		
		Map<String, Object> paramMap = Map.of(
			"userNo", userNo
		);
		
		List<CertificateInfoVO> certificateList = studentCertificateService.readficateList();
		List<ProgramCertIssueVO> programIssuedList = studentCertificateService.readProgramCertIssuedCertificates(paramMap);
		
		model.addAttribute("certificateList", certificateList);
		model.addAttribute("programIssuedList", programIssuedList);
		
		return "pfcp/student/certificate/issuedCertificateHistory";
	}
	
	@GetMapping("fileDownload.do")
	public void fileDownload(
		@RequestParam("fileRefNo") String fileRefNo,
		HttpServletResponse response
	) throws IOException {
		// FILE_REF에서 ATCH_ID 가져오기
		FileRefVO fileRef = fileRefService.readFileRef(fileRefNo);
		
		if (fileRef == null) {
	        throw new RuntimeException("파일 참조 정보가 없습니다.");
	    }
		
		String atchId = fileRef.getAtchId();
		
		// ATCH_FILE에서 파일 정보 가져오기
	    AtchFileVO atchFile = atchFileService.readAtchFile(atchId);
	    
	    if (atchFile == null || atchFile.getAtchContent() == null) {
	        throw new RuntimeException("파일 정보가 없습니다.");
	    }
	    
	    // 응답 헤더 설정
	    response.setContentType(atchFile.getAtchMime());
	    response.setHeader("Content-Disposition", "attachment; filename=\"" + 
	        new String(atchFile.getAtchOriginName().getBytes("UTF-8"), "ISO-8859-1") + "\"");
	    response.setContentLength((int) atchFile.getAtchSize());

	    // 파일 데이터 쓰기
	    try (OutputStream out = response.getOutputStream()) {
	        out.write(atchFile.getAtchContent());
	        out.flush();
	    }
	}
}
