package kr.or.ddit.pfcp.student.lecture.material.controller;

import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.pfcp.common.service.AtchFileService;
import kr.or.ddit.pfcp.common.service.FileRefService;
import kr.or.ddit.pfcp.common.vo.AtchFileVO;
import kr.or.ddit.pfcp.common.vo.FileRefVO;
import kr.or.ddit.pfcp.common.vo.LectureMaterialVO;
import kr.or.ddit.pfcp.student.lecture.material.service.LectureMaterialService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping("/rest/lecture/material")
public class LectureMaterialRestController {
	
	@Autowired
	LectureMaterialService lectureMaterialService;
	
	@Autowired
	FileRefService fileRefService;
	
	@Autowired
	AtchFileService atchFileService;
	
	@PostMapping
	public ResponseEntity<?> insertLectureMaterial(
				@RequestBody LectureMaterialVO lectureMaterial
			) throws IOException{
		
		MultipartFile file = lectureMaterial.getUploadFile();
	      
	      if (file != null && !file.isEmpty()) {
	          // ID 생성
	          String atchId = "ATCH" + System.currentTimeMillis();
	          String fileRefNo = "FR" + System.currentTimeMillis();
	          
	          byte[] fileBytes = file.getBytes();
	  
	          // ATCH_FILE insert
	          AtchFileVO atchFile = new AtchFileVO();
	          atchFile.setAtchId(atchId);
	          atchFile.setAtchMime(file.getContentType());
	          atchFile.setAtchOriginName(file.getOriginalFilename());
	          atchFile.setAtchSaveName(atchId + "_" + file.getOriginalFilename());
	          atchFile.setAtchSize(file.getSize());
	          atchFile.setAtchDate(LocalDate.now().format(DateTimeFormatter.BASIC_ISO_DATE));
	          atchFile.setAtchContent(fileBytes);
	          
	          atchFileService.createAtchFile(atchFile);
	          
	          // FILE_REF insert
	          FileRefVO fileRef = new FileRefVO();
	          fileRef.setFileRefNo(fileRefNo);
	          fileRef.setFileRefType("LECTURE_MATERIAL");
	          fileRef.setAtchId(atchId);
	          
	          fileRefService.createFileRef(fileRef);
	          
	          lectureMaterial.setFileRefNo(fileRefNo);
	          
	          lectureMaterialService.createLectureMaterial(lectureMaterial);
	          
	      } else {
	        
	      }
	      return ResponseEntity.ok(Map.of("success", true));
	}
	
	@GetMapping("{lecNo}")
	public ResponseEntity<List<LectureMaterialVO>> getMaterialList(
				@PathVariable String lecNo
			){
		List<LectureMaterialVO> lectureMaterial = lectureMaterialService.retrieveLectureMaterial(lecNo);
		return ResponseEntity.ok(lectureMaterial);
	}
	
	
}
