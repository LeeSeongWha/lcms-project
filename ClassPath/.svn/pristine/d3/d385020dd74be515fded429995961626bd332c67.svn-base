package kr.or.ddit.pfcp.professor.lecture.controller;

import java.security.Principal;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.MultiValueMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.pfcp.common.vo.LectureReqVO;
// import kr.or.ddit.pfcp.common.vo.LectureVO; // LectureVO는 이제 사용하지 않으므로 삭제
import kr.or.ddit.pfcp.professor.lecture.service.ProfessorLectureService;
import kr.or.ddit.validate.utils.ErrorsUtils;
import lombok.RequiredArgsConstructor;

/**
*
* @author 김태수
* @since 2025.07.01
* @see
*
* 수정일		  |		수정자	|	수정 내용
* ------------|-------------|--------------------------
* 2025.07.01  | 	김태수  	|  최초 작성
*/
@Controller
@RequestMapping("/professor/lecture")
@RequiredArgsConstructor
public class ProfessorLectureController {

	private final ProfessorLectureService service;

	static final String MODELNAME = "lecture"; // 모델명은 "lecture"로 유지

	@Autowired
	private ErrorsUtils errorsUtils;

	// 모델에 "lecture"라는 이름으로 LectureReqVO 객체를 준비
	@ModelAttribute(MODELNAME)
	public LectureReqVO lecture() {
		return new LectureReqVO();
	}

	/**
	 * 강의 목록 조회
	 * @param principal 현재 로그인한 사용자 정보 (교수 번호 획득용)
	 * @param model 뷰로 데이터를 전달할 모델 객체
	 * @param userNo (선택 사항) 특정 교수 번호로 필터링할 경우 사용. 이전에 principalUserNo로 통합될 가능성 있음.
	 * @return 강의 목록 페이지 경로
	 */
	@GetMapping("lecturetList.do")
	public String lecturetList(
		Principal principal,
		Model model,
		@RequestParam(value = "userNo", required = false) String paramUserNo // userNo 파라미터는 `paramUserNo`로 구분
	) {
		String currentUserNo = null;
		if (principal != null) {
			currentUserNo = principal.getName(); 
			model.addAttribute("userNo", currentUserNo);
		}

		List<LectureReqVO> lectureList = null; 
		if (paramUserNo != null && !paramUserNo.isEmpty()) {
			lectureList = service.readLecture(paramUserNo);
		} else {
			if (currentUserNo != null) {
				lectureList = service.readLecture(currentUserNo);
			} else {
				lectureList = service.readLectureList();
			}
		}

		model.addAttribute(MODELNAME, lectureList);
		return "pfcp/professor/lecture/lectureList";
	}

	/**
	 * 강의 신청 등록 폼 제공
	 * @param principal 현재 로그인한 사용자 정보
	 * @param model JSP로 데이터를 전달할 모델
	 * @return 강의 신청 폼 페이지 경로
	 */
	@GetMapping("lectureInsert.do")
	public String lectureInsert(
		Principal principal,
		Model model
	) {
		if (principal != null) {
			model.addAttribute("userNo", principal.getName());
		}
		return "pfcp/professor/lecture/lectureForm"; 
	}
	
	
    @GetMapping("/categories.do")
    @ResponseBody
    public List<String> getLectureCategories() {
        return service.retrieveLectureCategories();
    }

    @GetMapping("/subjectNames.do") 
    @ResponseBody
    public List<Map<String, Object>> getSubjectNames() { 
        return service.retrieveSubjects(); 
    }

    @GetMapping("/classroomNames.do")
    @ResponseBody
    public List<String> getClassroomNames() { 
        return service.retrieveClassroomNames(); 
    }
	

	/**
	 * 강의 등록 formProcess
	 * @param lectureReq 폼에서 바인딩된 강의 신청 정보 (LectureReqVO)
	 * @param errors 데이터 바인딩/검증 오류 결과
	 * @param redirectAttributes 리다이렉트 시 데이터 전달용
	 * @param uploadFile 강의 계획서 파일
	 * @return 리다이렉트 경로
	 */
	@PostMapping("lecturetInsertProcess.do")
	public String lecturetInsertProcess(
		@ModelAttribute(MODELNAME) LectureReqVO lectureReq, 
		BindingResult errors,
		RedirectAttributes redirectAttributes,
		@RequestParam("uploadFile") MultipartFile uploadFile 
	) {
		String lvn;
		if(!errors.hasErrors()) {
			service.createLecture(lectureReq); 
            if (lectureReq.getReqNo() != null) {
            	lvn = "redirect:/professor/lecture/lecturetList.do";
            } else {
                lvn = "redirect:/professor/lecture/lecturetList.do";
            }

		} else {
			redirectAttributes.addFlashAttribute(MODELNAME, lectureReq); // 모델명 통일
			MultiValueMap<String, String> customErrors = errorsUtils.errorsToMap(errors);
			redirectAttributes.addFlashAttribute("errors", customErrors);

			lvn = "redirect:/professor/lecture/lectureInsert.do"; 
		}
		return lvn;
	}

	/**
	 * 강의 수정 폼 제공
	 * @param no 수정할 강의 신청 번호 (reqNo)
	 * @param model 뷰로 데이터를 전달할 모델 객체
	 * @return 강의 수정 폼 페이지 경로
	 */
	@GetMapping("lecturetUpdate.do")
	public String lecturetUpdate(
			@RequestParam("no") String reqNo, 
			Model model
	) {
		List<LectureReqVO> lecture = service.readLecture(reqNo); 
		if (lecture == null) {
			return "redirect:/errorPage";
		}
		model.addAttribute(MODELNAME, lecture); 
		return "pfcp/professor/lecture/lecturetUpdateForm";
	}

	/**
	 * 강의 수정 formProcess
	 *
	 * @param reqNo 수정할 강의 신청 번호
	 * @param lectureReq 폼에서 바인딩된 강의 신청 정보 (LectureReqVO)
	 * @param errors 데이터 바인딩/검증 오류 결과
	 * @param redirectAttributes 리다이렉트 시 데이터 전달용
	 * @return 리다이렉트 경로
	 */
	@PostMapping("lectureUpdateProcess.do")
	public String professorUpdateProcess(
		@RequestParam("no") String reqNo, 
		@ModelAttribute(MODELNAME) LectureReqVO lectureReq, 
		BindingResult errors,
		RedirectAttributes redirectAttributes
	) {
		String lvn;
		lectureReq.setReqNo(reqNo);

		if (!errors.hasErrors()) {
			service.modifyLecture(lectureReq);


			lvn = "redirect:/professor/lecture/lecturetDetail.do?no=" + lectureReq.getReqNo();
		} else {
			redirectAttributes.addFlashAttribute(MODELNAME, lectureReq); 

			MultiValueMap<String, String> customErrors = errorsUtils.errorsToMap(errors);

			redirectAttributes.addFlashAttribute("errors", customErrors);

			lvn = "redirect:/professor/lecture/lecturetUpdate.do?no=" + reqNo;
		}

		return lvn;
	}


	/**
	 * 강의 삭제
	 * @param no 삭제할 강의 신청 번호 (reqNo)
	 * @return 리다이렉트 경로
	 */
	@GetMapping("lecturetDelete.do")
	public String lecturetDelete(
			@RequestParam("no") String reqNo 
	) {
		service.removeLecture(reqNo);
		return "redirect:/professor/lecture/lectureList.do";
	}


	//////////////////////////////////////////////////////////////////////////////

	/**
	 * 강의 참여 학생 목록 조회
	 * @return
	 */
	@GetMapping("student/studentList.do")
	public String studentList() {
		return "pfcp/professor/student/studentList";
	}

	/**
	 * 강의 참여 학생 목록 상세 조회
	 * @return
	 */
	@GetMapping("student/studentDetail.do")
	public String studentDetail() {
		return "pfcp/professor/student/studentDetail";
	}

	/**
	 * 학생 출석 정보 등록
	 * @return
	 */
	@GetMapping("student/attendance/insert.do")
	public String studentAttendanceInsert() {
		return "pfcp/professor/student/attendanceForm";
	}

	/**
	 * 학생 출석 정보 수정
	 * @return
	 */
	@GetMapping("student/attendance/modify.do")
	public String studentAttendanceModify() {
		return "pfcp/professor/student/attendanceUpdateForm";
	}

	/**
	 * 출석 기준 등록
	 * @return
	 */
	@GetMapping("attendanceStandardInsert.do")
	public String attendanceStandardInsert() {
		return "pfcp/professor/lecture/attendanceStandardForm";
	}

	/**
	 * 출석 기준 수정
	 * @return
	 */
	@GetMapping("attendanceStandardUpdate.do")
	public String attendanceStandardUpdate() {
		return "pfcp/professor/lecture/attendanceStandardUpdateForm";
	}

	/**
	 * 출석 기준 삭제
	 * @return
	 */
	@GetMapping("attendanceStandardDelete.do")
	public String attendanceStandardDelete() {
		return "redirect:/professor/lecture/studentList.do";
	}

	/**
	 * 출석 기준 조회
	 * @return
	 */
	@GetMapping("attendanceStandardList.do")
	public String attendanceStandardList() {
		return "pfcp/professor/lecture/attendanceStandardList";
	}

	/**
	 * 과제 목록 조회
	 * @return
	 */
	@GetMapping("assignmentList.do")
	public String assignmentList() {
		return "pfcp/professor/lecture/assignmentList";
	}

	/**
	 * 과제 목록 상세조회
	 * @return
	 */
	@GetMapping("assignmentDetail.do")
	public String assignmentDetail() {
		return "pfcp/professor/lecture/assignmentDetail";
	}

	/**
	 * 과제 등록
	 * @return
	 */
	@GetMapping("assignmentInsert.do")
	public String assignmentInsert() {
		return "pfcp/professor/lecture/assignmentForm";
	}

	/**
	 * 과제 수정
	 * @return
	 */
	@GetMapping("assignmentUpdate.do")
	public String assignmentUpdate() {
		return "pfcp/professor/lecture/assignmentUpdateForm";
	}


	/**
	 * 과제 삭제
	 * @return
	 */
	@GetMapping("assignmentDelete.do")
	public String assignmentDelete() {
		return "redirect:/professor/lecture/assignmentList.do";
	}

	/**
	 * 강의 평가 조회
	 * @return
	 */
	@GetMapping("assignmentEvaluationList.do")
	public String assignmentEvaluationList() {
		return "pfcp/professor/lecture/assignmentEvaluationList";
	}

	/**
	 * 강의 평가 등록
	 * @return
	 */
	@GetMapping("assignmentEvaluationInsert.do")
	public String assignmentEvaluationInsert() {
		return "pfcp/professor/lecture/assignmentEvaluationInsert";
	}

	/**
	 * 강의 평가 수정
	 * @return
	 */
	@GetMapping("assignmentEvaluationUpdate.do")
	public String assignmentEvaluationUpdate() {
		return "pfcp/professor/lecture/assignmentEvaluationUpdate";
	}

	/**
	 * 강의 평가 삭제 ..?
	 * @return
	 */
	@GetMapping("assignmentEvaluationDelete.do")
	public String assignmentEvaluationDelete() {
		return "redirect:/professor/lecture/assignmentEvaluationList.do";
	}

	/**
	 * 과제 피드백 조회
	 * @return
	 */
	@GetMapping("assignmentFeedbackList.do")
	public String assignmentFeedbackList() {
		return "pfcp/professor/lecture/assignmentFeedbackList";
	}

	/**
	 * 과제 피드백 등록
	 * @return
	 */
	@GetMapping("assignmentFeedbackInsert.do")
	public String assignmentFeedbackInsert() {
		return "pfcp/professor/lecture/assignmentFeedbackInsert";
	}

	/**
	 * 과제 피드백 수정
	 * @return
	 */
	@GetMapping("assignmentFeedbackUpdate.do")
	public String assignmentFeedbackUpdate() {
		return "pfcp/professor/lecture/assignmentFeedbackUpdate";
	}

	/**
	 * 과제 피드백 삭제
	 * @return
	 */
	@GetMapping("assignmentFeedbackDelete.do")
	public String assignmentFeedbackDelete() {
		return "redirect:/professor/lecture/assignmentFeedbackList.do";
	}


}