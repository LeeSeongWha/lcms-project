package kr.or.ddit.pfcp.staff.schedule.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.pfcp.common.vo.ScheduleVO;
import kr.or.ddit.pfcp.staff.schedule.service.StaffScheduleService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/staff/schedule")
public class StaffScheduleController {

	@ModelAttribute("scheduleVO")
	public ScheduleVO setupScheduleVO() {
		return new ScheduleVO();
	}

	@Autowired
	private StaffScheduleService scheduleService;

	/** 1. 일정 메인 화면 */

	@GetMapping
	public String scheduleMain(Model model) {
		// 스케쥴 그룹 타입
		model.addAttribute("scheduleTypes", scheduleService.getScheduleTypeList());
		return "pfcp/staff/schedule/scheduleMain";
	}

	/** 2. 일정 목록 조회 */
	@GetMapping("/list")
	@ResponseBody
	public List<Map<String, Object>> getScheduleList(@RequestParam(required = false) String scheduleType,
			@RequestParam(required = false) String startDate, @RequestParam(required = false) String endDate) {
		Map<String, Object> param = new HashMap<>();
		param.put("scheduleType", scheduleType);
		param.put("startDate", startDate);
		param.put("endDate", endDate);

		List<ScheduleVO> schedules = scheduleService.getScheduleList(param);

		// FullCalendar가 이해할 수 있는 구조로 가공
		List<Map<String, Object>> result = schedules.stream().map(schedule -> {
			Map<String, Object> event = new HashMap<>();
			event.put("id", schedule.getScheduleNo()); // 일정 ID
			event.put("title", schedule.getScheduleTitle()); // 일정 제목
			event.put("start", schedule.getStartDate()); // 시작일
			event.put("end", schedule.getEndDate()); // 종료일

			// 추가 정보는 extendedProps에 담기
			Map<String, Object> extended = new HashMap<>();
			extended.put("scheduleDesp", schedule.getScheduleDesp());
			extended.put("startTime", schedule.getStartTime());
			extended.put("endTime", schedule.getEndTime());
			extended.put("type", schedule.getType()); // ScheduleTypeVO 객체 통째로 전달

			event.put("extendedProps", extended);

			return event;
		}).collect(Collectors.toList());

		return result;
	}

	/**
	 * 단일 일정 상세 조회 (수정용)
	 */
	@GetMapping("/{scheduleNo}")
	@ResponseBody
	public ScheduleVO getScheduleDetail(@PathVariable("scheduleNo") String scheduleNo) {
		return scheduleService.getSchedule(scheduleNo);
	}

	// 등록 및 수정 처리
	@PostMapping("/save")
	public String saveSchedule(@ModelAttribute("scheduleVO") ScheduleVO scheduleVO,
			@RequestParam("formMode") String formMode, RedirectAttributes redirectAttributes,
			BindingResult bindingResult, Model model

	) {
		if (bindingResult.hasErrors()) {
			model.addAttribute("scheduleTypes", scheduleService.getScheduleTypeList());
			return "pfcp/staff/schedule/scheduleMain"; // 폼으로 다시 이동
		}
		int result = 0;
		if ("insert".equals(formMode)) {
			result = scheduleService.insertSchedule(scheduleVO);
			redirectAttributes.addFlashAttribute("message", result > 0 ? "일정이 등록되었습니다." : "등록 실패");
		} else if ("update".equals(formMode)) {
			result = scheduleService.updateSchedule(scheduleVO);
			redirectAttributes.addFlashAttribute("message", result > 0 ? "일정이 수정되었습니다." : "수정 실패");
		}

		return "redirect:/staff/schedule";
	}
//
//    /** 5. 일정 삭제 */
//    @DeleteMapping("/delete/{scheduleNo}")
//    @ResponseBody
//    public ResponseEntity<?> deleteSchedule(@PathVariable("scheduleNo") String scheduleNo) {
//        int result = scheduleService.deleteSchedule(scheduleNo);
//        return ResponseEntity.ok(Map.of("result", result));
//    }
//
//    /** 6. 필터링 검색 (유형, 기간 등) */
//    @GetMapping("/filter")
//    @ResponseBody
//    public List<ScheduleVO> filterSchedule(
//        @RequestParam(required = false) String scheduleType,
//        @RequestParam(required = false) String refTypeCode,
//        @RequestParam(required = false) String startDate,
//        @RequestParam(required = false) String endDate
//    ) {
//        Map<String, Object> filterMap = new HashMap<>();
//        filterMap.put("scheduleType", scheduleType);
//        filterMap.put("refTypeCode", refTypeCode);
//        filterMap.put("startDate", startDate);
//        filterMap.put("endDate", endDate);
//        return scheduleService.filterScheduleList(filterMap);
//    }
}
