package kr.or.ddit.pfcp.student.lecture.enroll.controller;

import java.security.Principal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.pfcp.common.vo.LectureEnrVO;
import kr.or.ddit.pfcp.common.vo.LectureVO;
import kr.or.ddit.pfcp.student.lecture.enroll.service.LectureEnrService;
import kr.or.ddit.security.auth.UserVOWrapper;
import lombok.extern.slf4j.Slf4j;


@Controller
@Slf4j
@RequestMapping("/student/lecture/enroll")
public class LectureEnrollController {
	
	
	
	@Autowired
	private LectureEnrService enrService;
	
	
	// 1. 수강신청 메인 페이지
    @GetMapping
    public String enrollMain(
    		Model model
    		, Principal principal
    	) {
    	// student
		 String userNo = principal.getName(); 
		 // log.info("{}", userNo);
    	 String nowSemester = enrService.readNowSemester();
    	 List<LectureVO> lecList = enrService.readLectureList(nowSemester);
    	 List<LectureEnrVO> myEnrollList = enrService.getMyEnrollList(userNo);
    	  
    	  model.addAttribute("lectureList", lecList);
    	  model.addAttribute("semesterNo", nowSemester);
    	  model.addAttribute("myEnrollList", myEnrollList);
    	
        return "pfcp/student/lecture/enrollMain";
    }
    
    @PostMapping("/{lecNo}")
    @ResponseBody
    public ResponseEntity<?> enrollLecture(@PathVariable String lecNo,
                                           @AuthenticationPrincipal UserVOWrapper user) {
        try {
            enrService.enrollLecture(lecNo, user.getUsername());
            return ResponseEntity.ok("신청 완료");
        } catch (IllegalStateException e) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());
        }
    }

    // 2. 수강 정정 화면
    @GetMapping("/edit")
    public String editPage() {
        return "pfcp/student/lecture/editPage";
    }
    // 3. 수강 정정 처리 
    @PutMapping("/edit")
    public String processEdit(@RequestParam("lectureId") Long lectureId) {
       
    	
        return "redirect:/student/lecture/enroll";
    }

    // 3. 수강 신청 취소 처리
    @DeleteMapping("/{lectureNo}")
    @ResponseBody
    public String cancelEnrollment(@PathVariable("lectureNo") String lectureNo) {
        return "canceled";
    }

  
	
	
}
