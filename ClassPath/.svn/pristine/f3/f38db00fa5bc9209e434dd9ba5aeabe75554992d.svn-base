package kr.or.ddit.pfcp.student.certificate.controller;

import java.io.IOException;
import java.io.OutputStream;
import java.security.Principal;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.itextpdf.io.font.PdfEncodings;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;

import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import kr.or.ddit.pfcp.common.service.AtchFileService;
import kr.or.ddit.pfcp.common.service.FileRefService;
import kr.or.ddit.pfcp.common.service.KakaoPayService;
import kr.or.ddit.pfcp.common.service.UserService;
import kr.or.ddit.pfcp.common.vo.AtchFileVO;
import kr.or.ddit.pfcp.common.vo.CertificateInfoVO;
import kr.or.ddit.pfcp.common.vo.FileRefVO;
import kr.or.ddit.pfcp.common.vo.KakaoPayVO;
import kr.or.ddit.pfcp.common.vo.ProgramCertIssueVO;
import kr.or.ddit.pfcp.common.vo.ProgramCertReqVO;
import kr.or.ddit.pfcp.common.vo.ProgramVO;
import kr.or.ddit.pfcp.common.vo.StudentVO;
import kr.or.ddit.pfcp.student.certificate.service.CertificateRequestResult;
import kr.or.ddit.pfcp.student.certificate.service.StudentCertificateService;
import kr.or.ddit.validate.utils.ErrorsUtils;

/**
 * 목록 조회 없음. 상세 조회만 있음.
 * 
 * @author seokyungdeok
 * @since 250630
 * 
 * << 개정이력(Modification Information) >>
 * 수정일	|	수정자	|	수정 내용
 * -----------------------------------------------
 * 250630	|	서경덕	|	최초 생성
 */
@Controller
@RequestMapping("/student/certificate")
public class StudentCertificateController {
	private String tid;
	
	@Autowired
	private StudentCertificateService studentCertificateService;
	
	@Autowired
	private KakaoPayService kakaoPayService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private FileRefService fileRefService;
	
	@Autowired
	private AtchFileService atchFileService;
	
	static final String MODEL_NAME = "programCertReq";
	
	@Autowired
	private ErrorsUtils errorsUtils;
	
	@ModelAttribute(MODEL_NAME)
	public ProgramCertReqVO programCertReq() {
		return new ProgramCertReqVO();
	}
	
	@GetMapping("{certCode}.do")
	public String certificatePage(
	    @PathVariable String certCode,
	    Principal principal,
	    Model model
	) {
	    String userNo = principal.getName();

	    switch (certCode) {
	        case "CERT001":
	        	
	            return "pfcp/student/certificate/enrollmentCertificate";
	            
	        case "CERT002":
	        	Map<String, Object> paramMap = new HashMap<>();
	    
	        	paramMap.put("certCode", certCode);
	        	
	        	CertificateInfoVO certificateInfo = studentCertificateService.readCertificateInfo(paramMap);
	        	
	        	model.addAttribute("certificateInfo", certificateInfo);
	        	
	            return "pfcp/student/certificate/graduationCertificate";
	            
	        case "CERT003":
	        	
	            return "pfcp/student/certificate/transcriptCertificate";
	            
	        case "CERT004":
	        	
	            return "pfcp/student/certificate/scholarshipCertificate";
	            
	        default:
	            throw new IllegalArgumentException("지원하지 않는 증명서 코드입니다: " + certCode);
	    }
	}
	
	@GetMapping("/kakaopay/ready")
	public String kakaoPayReady(Principal principal) {
	    String userNo = principal.getName();

	    RestTemplate restTemplate = new RestTemplate();
	    HttpHeaders headers = new HttpHeaders();
	    headers.set("Authorization", "KakaoAK bd1f60c0000e02dace2b28237bd6826e");
	    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);

	    MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
	    params.add("cid", "TC0ONETIME");

	    // orderId 생성
	    String orderId = "order_" + userNo + "_" + System.currentTimeMillis();
	    params.add("partner_order_id", orderId);
	    params.add("partner_user_id", userNo);
	    params.add("item_name", "졸업 증명서");
	    params.add("quantity", "1");
	    params.add("total_amount", "2000");
	    params.add("tax_free_amount", "0");
	    params.add("approval_url", "http://localhost/student/certificate/kakaopay/success?partner_order_id=" + orderId);
	    params.add("cancel_url", "http://localhost/student/certificate/kakaopay/cancel");
	    params.add("fail_url", "http://localhost/student/certificate/kakaopay/fail");

	    HttpEntity<MultiValueMap<String, String>> body = new HttpEntity<>(params, headers);

	    ResponseEntity<Map> response = restTemplate.postForEntity(
	            "https://kapi.kakao.com/v1/payment/ready",
	            body,
	            Map.class
	    );

	    Map<String, Object> responseBody = response.getBody();
	    if (responseBody == null) {
	        throw new RuntimeException("카카오페이 요청 실패");
	    }

	    String tid = (String) responseBody.get("tid");
	    String redirectUrl = (String) responseBody.get("next_redirect_pc_url");

	    // **DB에 tid 저장**
	    kakaoPayService.saveTid(orderId, tid, userNo);

	    return "redirect:" + redirectUrl;
	}
	
	@GetMapping("/kakaopay/success")
    public String kakaoPaySuccess(
    	@RequestParam("pg_token") String pgToken,
    	@RequestParam(value="partner_order_id", required=false) String partnerOrderId,
    	@RequestParam(value="custom_tid", required=false) String customTid,
		HttpSession session, 
		Principal principal,
		HttpServletResponse response,
		Model model
	) throws IOException {
	    
	    String tid = kakaoPayService.readTid(partnerOrderId).getTid();
        
        if (tid == null && customTid != null) {
            tid = customTid;
        }
        
        String userNo;
        
        if (principal != null) {
            userNo = principal.getName();
        } else if (partnerOrderId != null && partnerOrderId.startsWith("order_")) {
            // orderId 예시: order_ST20220810_1722200000000
            String[] parts = partnerOrderId.split("_", 3);
            userNo = parts.length >= 2 ? parts[1] : "UNKNOWN";
        } else {
            throw new IllegalStateException("로그인 정보 없음. partner_order_id 필요");
        }

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        
        headers.set("Authorization", "KakaoAK bd1f60c0000e02dace2b28237bd6826e");
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);

        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
        params.add("cid", "TC0ONETIME");
        params.add("tid", tid);
        params.add("partner_order_id", partnerOrderId);
        params.add("partner_user_id", userNo);
        params.add("pg_token", pgToken);

        HttpEntity<MultiValueMap<String, String>> body = new HttpEntity<>(params, headers);

        ResponseEntity<Map> approveResponse = restTemplate.postForEntity(
    	    "https://kapi.kakao.com/v1/payment/approve",
    	    body,
    	    Map.class
    	);
        
        // 2. 결제 성공 → 증명서 발급 처리
        String certCode = "CERT002";
        
        Map<String, Object> paramMap = new HashMap<>();
        
        paramMap.put("certCode", certCode);
        
        model.addAttribute("downloadUrl", "/student/certificate/downloadPdf?orderId=" + partnerOrderId);
        
        return "pfcp/student/certificate/paymentSuccess";

        // 3. 바로 PDF 생성 및 다운로드
//        StudentVO student = userService.readStudent(userNo);
//        CertificateInfoVO certInfo = studentCertificateService.readCertificateInfo(paramMap);
//        
//        response.setContentType("application/pdf");
//        response.setHeader("Content-Disposition", "attachment; filename=" + certCode + "_certificate.pdf");
//
//        PdfWriter writer = new PdfWriter(((ServletResponse) response).getOutputStream());
//        PdfDocument pdf = new PdfDocument(writer);
//        Document document = new Document(pdf);
//
//        String fontPath = new org.springframework.core.io.ClassPathResource("static/fonts/NanumGothic-Regular.ttf")
//                .getFile().getPath();
//        
//        PdfFont font = PdfFontFactory.createFont(fontPath, PdfEncodings.IDENTITY_H, pdf);
//        document.setFont(font);
//
//        document.add(new Paragraph(certInfo.getCertName()).setFontSize(20).setBold());
//        document.add(new Paragraph("이름: " + student.getUserName()));
//        document.add(new Paragraph("학번: " + student.getUserNo()));
//        document.add(new Paragraph("학과: " + student.getDepartmentName()));
//        document.add(new Paragraph("설명: " + certInfo.getCertDesc()));
//        document.add(new Paragraph("발급일: " + LocalDate.now()));
//
//        document.close();
//        
//        return "redirect:/student/certificate/issuedCertificateHistory.do";
    }
	
	@GetMapping("/downloadPdf")
	public void downloadPdf(
		@RequestParam String orderId,
		HttpServletResponse response
	) throws IOException {
		KakaoPayVO kakaoPay = kakaoPayService.readTid(orderId);
		
		StudentVO student = userService.readStudent(kakaoPay.getUserNo());
		
		CertificateInfoVO certInfo = studentCertificateService.readCertificateInfo(Map.of("certCode", "CERT002"));

		response.setContentType("application/pdf");
	    response.setHeader("Content-Disposition", "attachment; filename=CERT002_certificate.pdf");

	    PdfWriter writer = new PdfWriter(response.getOutputStream());
	    PdfDocument pdf = new PdfDocument(writer);
	    Document document = new Document(pdf);
	    
	    String fontPath = new org.springframework.core.io.ClassPathResource("static/fonts/NanumGothic-Regular.ttf").getFile().getPath();
	    
	    PdfFont font = PdfFontFactory.createFont(fontPath, PdfEncodings.IDENTITY_H, pdf);
	    document.setFont(font);
	    
	    document.add(new Paragraph(certInfo.getCertName()).setFontSize(20).setBold());
	    document.add(new Paragraph("이름: " + student.getUserName()));
	    document.add(new Paragraph("학번: " + student.getUserNo()));
	    document.add(new Paragraph("학과: " + student.getDepartmentName()));
	    document.add(new Paragraph("설명: " + certInfo.getCertDesc()));
	    document.add(new Paragraph("발급일: " + LocalDate.now()));
	    document.close();
	}
	
	@GetMapping("/kakaopay/cancel")
    public String kakaoPayCancel() {
        return "pfcp/student/certificate/paymentCancel";
    }

    @GetMapping("/kakaopay/fail")
    public String kakaoPayFail() {
        return "pfcp/student/certificate/paymentFail";
    }
	
	@GetMapping("suryoCertificate.do")
	public String suryoCertificate(
		@ModelAttribute(MODEL_NAME) ProgramCertReqVO programCertReq,
		Principal principal,
		@RequestParam String no,
		BindingResult errors,
		RedirectAttributes redirectAttributes
	) {
		if (errors.hasErrors()) {
	        redirectAttributes.addFlashAttribute("errors", errorsUtils.errorsToMap(errors));
	        return "redirect:/student/certificate/programList.do";
	    }
		
	    String userNo = principal.getName();
	    
	    CertificateRequestResult result = studentCertificateService.requestCertificate(no, userNo);

	    switch (result) {
	    	case ALREADY_APPLY:
	    		redirectAttributes.addFlashAttribute("message", "이미 수료증 발급 신청이 완료되었습니다.");
	            break;
	    
	        case ALREADY_ISSUED:
	            redirectAttributes.addFlashAttribute("message", "이미 수료증이 발급되었습니다.");
	            break;
	            
	        case NOT_COMPLETED:
	            redirectAttributes.addFlashAttribute("message", "이수가 완료되지 않았습니다.");
	            break;
	            
	        case SUCCESS:
	            redirectAttributes.addFlashAttribute("message", "수료증 신청이 완료되었습니다.");
	            break;
	    }
		
		return "redirect:/student/program/myParticipationDetail.do?no=" + no;
	}
	
	
	/**
	 * 증명서 발급 내역 조회
	 * 
	 * @return
	 */
	@GetMapping("issuedCertificateHistory.do")
	public String issuedCertificateHistory(
		Principal principal,
		Model model
	) {
		String userNo = principal.getName();
		
		Map<String, Object> paramMap = Map.of(
			"userNo", userNo
		);
		
		List<CertificateInfoVO> certificateList = studentCertificateService.readficateList();
		List<ProgramCertIssueVO> programIssuedList = studentCertificateService.readProgramCertIssuedCertificates(paramMap);
		
		model.addAttribute("certificateList", certificateList);
		model.addAttribute("programIssuedList", programIssuedList);
		
		return "pfcp/student/certificate/issuedCertificateHistory";
	}
	
	@GetMapping("fileDownload.do")
	public void fileDownload(
		@RequestParam("fileRefNo") String fileRefNo,
		HttpServletResponse response
	) throws IOException {
		// FILE_REF에서 ATCH_ID 가져오기
		FileRefVO fileRef = fileRefService.readFileRef(fileRefNo);
		
		if (fileRef == null) {
	        throw new RuntimeException("파일 참조 정보가 없습니다.");
	    }
		
		String atchId = fileRef.getAtchId();
		
		// ATCH_FILE에서 파일 정보 가져오기
	    AtchFileVO atchFile = atchFileService.readAtchFile(atchId);
	    
	    if (atchFile == null || atchFile.getAtchContent() == null) {
	        throw new RuntimeException("파일 정보가 없습니다.");
	    }
	    
	    // 응답 헤더 설정
	    response.setContentType(atchFile.getAtchMime());
	    response.setHeader("Content-Disposition", "attachment; filename=\"" + 
	        new String(atchFile.getAtchOriginName().getBytes("UTF-8"), "ISO-8859-1") + "\"");
	    response.setContentLength((int) atchFile.getAtchSize());

	    // 파일 데이터 쓰기
	    try (OutputStream out = response.getOutputStream()) {
	        out.write(atchFile.getAtchContent());
	        out.flush();
	    }
	}
}
