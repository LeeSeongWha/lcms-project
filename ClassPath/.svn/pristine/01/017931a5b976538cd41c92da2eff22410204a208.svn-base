package kr.or.ddit.pfcp.professor.lecture.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.MultiValueMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.pfcp.common.vo.LectureVO;
import kr.or.ddit.pfcp.professor.lecture.service.ProfessorLectureService;
import kr.or.ddit.validate.utils.ErrorsUtils;
import lombok.RequiredArgsConstructor;

/**
*
* @author 김태수
* @since 2025.07.01
* @see
* 
* 수정일		  |		수정자	|	수정 내용
* ------------|-------------|--------------------------
* 2025.07.01  | 	김태수   	|   최초 작성
* 
*/
@Controller
@RequestMapping("/professor/lecture")
@RequiredArgsConstructor
public class ProfessorLectureController {
	
	private final ProfessorLectureService service;
	
	static final String MODELNAME = "lecture";
	
	@Autowired
	private ErrorsUtils errorsUtils;
	
	@ModelAttribute(MODELNAME)
	public LectureVO lecture() {
		return new LectureVO();
	}
	
	/**
	 * 강의 조회
	 * @return
	 */
	@GetMapping("lecturetList.do")
	public String lecturetList(Model model) {
		
		List<LectureVO> lecture = service.readLectureList();
		
		model.addAttribute("lecture",lecture);
		
		return "pfcp/professor/lecture/lectureList";
	}
	
	
	/**
	 * 강의 상세 조회
	 * @return
	 */
	@GetMapping("lecturetDetail.do")
	public String lecturetDetail(
		@RequestParam String no
		,Model model
	) {
		LectureVO lecture = service.readLecture(no);
		model.addAttribute("lecture",lecture);
		return "pfcp/professor/lecture/lectureDetail";
	}
	
	
	/**
	 * 강의 등록
	 * @return
	 */
	@GetMapping("lecturetInsert.do")
	public String lecturetInsert(
			@ModelAttribute(MODELNAME) LectureVO lecture
			,BindingResult errors
			, RedirectAttributes redirectAttributes
	) {
		String lvn;
		
		if(!errors.hasErrors()) {
			service.createLecture(lecture);
			lvn = "redirect:/professor/lecture/lecturetDetail.do?no=" + lecture.getUserNo();
			
		}else {
			redirectAttributes.addFlashAttribute(MODELNAME,lecture);
			MultiValueMap<String, String> customErrors = errorsUtils.errorsToMap(errors);
			redirectAttributes.addFlashAttribute("errors", customErrors);
			
			lvn = "redirect:/professor/lecture/lecturetInsert.do";
			
		}
		
		return lvn;
	}
	
	
	/**
	 * 강의 수정
	 * @return
	 */
	@GetMapping("lecturetUpdate.do")
	public String lecturetUpdate(
			String no,
			Model model
	) {
		LectureVO lecture = service.readLecture(no);
		
		model.addAttribute("lecture",lecture);
		
		return "pfcp/professor/lecture/lecturetUpdateForm";
	}
	
	/**
	 * 강의 수정 formProcess
	 * 
	 * @return
	 */
	@PostMapping("lectureUpdateProcess.do")
	public String professorUpdateProcess(
		String no, 
		@ModelAttribute(MODELNAME) LectureVO lecture,
		BindingResult errors, 
		RedirectAttributes redirectAttributes
	) {
		String lvn;
		
		lecture.setUserNo(lecture.getUserNo());
		
		if (!errors.hasErrors()) {
			service.modifyLecture(lecture);
			
			
			lvn = "redirect:/professor/lecture/lecturetDetail.do?no=" + lecture.getUserNo();
		} else {
			redirectAttributes.addFlashAttribute(MODELNAME, lecture);
			
			MultiValueMap<String, String> customErrors = errorsUtils.errorsToMap(errors);
			
			redirectAttributes.addFlashAttribute("errors", customErrors);
			
			lvn = "redirect:/professor/lecture/lecturetUpdate.do?no=" + no;
		}
		
		return lvn;
	}
	
	
	/**
	 * 강의 삭제
	 * @return
	 */
	@GetMapping("lecturetDelete.do")
	public String lecturetDelete(
			@RequestParam String no
	) {
		
		service.removeLecture(no);
		
		return "redirect:/professor/lecture/lectureList.do";
	}
	
	
	
	
//////////////////////////////////////////////////////////////////////////////	
	
	
	/**
	 * 강의 참여 학생 목록 조회
	 * @return
	 */
	@GetMapping("student/studentList.do")
	public String studentList() {
		return "pfcp/professor/student/studentList";
	}
	
	/**
	 * 강의 참여 학생 목록 상세 조회
	 * @return
	 */
	@GetMapping("student/studentDetail.do")
	public String studentDetail() {
		return "pfcp/professor/student/studentDetail";
	}
	
	/**
	 * 학생 출석 정보 등록
	 * @return
	 */
	@GetMapping("student/attendance/insert.do")
	public String studentAttendanceInsert() {
		return "pfcp/professor/student/attendanceForm";
	}
	
	/**
	 * 학생 출석 정보 수정
	 * @return
	 */
	@GetMapping("student/attendance/modify.do")
	public String studentAttendanceModify() {
		return "pfcp/professor/student/attendanceUpdateForm";
	}
	
	/**
	 * 출석 기준 등록
	 * @return
	 */
	@GetMapping("attendanceStandardInsert.do")
	public String attendanceStandardInsert() {
		return "pfcp/professor/lecture/attendanceStandardForm";
	}
	
	/**
	 * 출석 기준 수정
	 * @return
	 */
	@GetMapping("attendanceStandardUpdate.do")
	public String attendanceStandardUpdate() {
		return "pfcp/professor/lecture/attendanceStandardUpdateForm";
	}
	
	/**
	 * 출석 기준 삭제
	 * @return
	 */
	@GetMapping("attendanceStandardDelete.do")
	public String attendanceStandardDelete() {
		return "redirect:/professor/lecture/studentList.do";
	}
	
	/**
	 * 출석 기준 조회
	 * @return
	 */
	@GetMapping("attendanceStandardList.do")
	public String attendanceStandardList() {
		return "pfcp/professor/lecture/attendanceStandardList";
	}
	
	/**
	 * 과제 목록 조회
	 * @return
	 */
	@GetMapping("assignmentList.do")
	public String assignmentList() {
		return "pfcp/professor/lecture/assignmentList";
	}
	
	/**
	 * 과제 목록 상세조회
	 * @return
	 */
	@GetMapping("assignmentDetail.do")
	public String assignmentDetail() {
		return "pfcp/professor/lecture/assignmentDetail";
	}
	
	/**
	 * 과제 등록
	 * @return
	 */
	@GetMapping("assignmentInsert.do")
	public String assignmentInsert() {
		return "pfcp/professor/lecture/assignmentForm";
	}
	
	/**
	 * 과제 수정
	 * @return
	 */
	@GetMapping("assignmentUpdate.do")
	public String assignmentUpdate() {
		return "pfcp/professor/lecture/assignmentUpdateForm";
	}
	
	
	/**
	 * 과제 삭제
	 * @return
	 */
	@GetMapping("assignmentDelete.do")
	public String assignmentDelete() {
		return "redirect:/professor/lecture/assignmentList.do";
	}
	
	/**
	 * 강의 평가 조회
	 * @return
	 */
	@GetMapping("assignmentEvaluationList.do")
	public String assignmentEvaluationList() {
		return "pfcp/professor/lecture/assignmentEvaluationList";
	}
	
	/**
	 * 강의 평가 등록
	 * @return
	 */
	@GetMapping("assignmentEvaluationInsert.do")
	public String assignmentEvaluationInsert() {
		return "pfcp/professor/lecture/assignmentEvaluationInsert";
	}
	
	/**
	 * 강의 평가 수정
	 * @return
	 */
	@GetMapping("assignmentEvaluationUpdate.do")
	public String assignmentEvaluationUpdate() {
		return "pfcp/professor/lecture/assignmentEvaluationUpdate";
	}
	
	/**
	 * 강의 평가 삭제 ..?
	 * @return
	 */
	@GetMapping("assignmentEvaluationDelete.do")
	public String assignmentEvaluationDelete() {
		return "redirect:/professor/lecture/assignmentEvaluationList.do";
	}
	
	/**
	 * 과제 피드백 조회
	 * @return
	 */
	@GetMapping("assignmentFeedbackList.do")
	public String assignmentFeedbackList() {
		return "pfcp/professor/lecture/assignmentFeedbackList";
	}
	
	/**
	 * 과제 피드백 등록
	 * @return
	 */
	@GetMapping("assignmentFeedbackInsert.do")
	public String assignmentFeedbackInsert() {
		return "pfcp/professor/lecture/assignmentFeedbackInsert";
	}
	
	/**
	 * 과제 피드백 수정
	 * @return
	 */
	@GetMapping("assignmentFeedbackUpdate.do")
	public String assignmentFeedbackUpdate() {
		return "pfcp/professor/lecture/assignmentFeedbackUpdate";
	}
	
	/**
	 * 과제 피드백 삭제
	 * @return
	 */
	@GetMapping("assignmentFeedbackDelete.do")
	public String assignmentFeedbackDelete() {
		return "redirect:/professor/lecture/assignmentFeedbackList.do";
	}
	
	
}
