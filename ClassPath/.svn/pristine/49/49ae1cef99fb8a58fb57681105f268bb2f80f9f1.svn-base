<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="kr.or.ddit.pfcp.staff.studentmanage.mapper.StudentmanageMapper">

	<!-- ResultMap도 수정 필요 -->
	<resultMap id="studentMap" type="StudentVO">
		<!-- UserVO 필드들 (상속받은 필드들) -->
		<id property="userNo" column="USER_NO" />
		<result property="userName" column="USER_NAME" />
		<result property="userEmail" column="USER_EMAIL" />
		<result property="userTel" column="USER_TEL" />
		<result property="userAdd1" column="USER_ADD1" />
		<result property="userAdd2" column="USER_ADD2" />
		<result property="userRegno1" column="USER_REGNO1" />
		<result property="gender" column="GENDER" />
		<result property="bankCd" column="BANK_CD" />
		<result property="userBankno" column="USER_BANKNO" />
		<result property="userRole" column="USER_ROLE" />

		<!-- StudentVO 전용 필드들 - 존재하는 컬럼만 매핑 -->
		<result property="studentGrade" column="STUDENT_GRADE" />
		<result property="departmentNo" column="DEPARTMENT_NO" />
		<result property="rnum" column="ROWNUM" />
		<!-- 존재하지 않는 필드들 제거: studentNo, studentEdate, studentGdate, studentEmp -->

		<!-- Department Association -->
		<association property="department" javaType="DepartmentVO">
			<id property="departmentNo" column="DEPARTMENT_NO" />
			<result property="departmentName" column="DEPARTMENT_NAME" />
		</association>
	</resultMap>

<!-- 학생 목록 조회 -->
    <select id="selectStudentList" resultMap="studentMap">
        SELECT 
        	ROWNUM,
            S.USER_NO,
            U.USER_NAME,
            S.STUDENT_GRADE,
            S.DEPARTMENT_NO,
            D.DEPARTMENT_NAME,
            U.USER_EMAIL,
            U.USER_TEL,
            U.USER_ROLE
        FROM STUDENT S
        JOIN TB_USER U ON S.USER_NO = U.USER_NO
        LEFT JOIN DEPARTMENT D ON S.DEPARTMENT_NO = D.DEPARTMENT_NO
        ORDER BY S.USER_NO
    </select>

<!-- 특정 학생 조회 - 수정된 버전 -->
<select id="selectStudent" resultMap="studentMap" parameterType="String">
    SELECT 
        S.USER_NO,
        U.USER_NAME,
        S.STUDENT_GRADE,
        S.DEPARTMENT_NO,
        U.BANK_CD,
        U.USER_BANKNO,
        U.USER_EMAIL,
        U.USER_TEL,
        U.USER_ADD1,
        U.USER_ADD2,
        U.USER_REGNO1,
        U.GENDER,
        U.USER_ROLE,
        D.DEPARTMENT_NAME
    FROM STUDENT S
    JOIN TB_USER U ON S.USER_NO = U.USER_NO
    LEFT JOIN DEPARTMENT D ON S.DEPARTMENT_NO = D.DEPARTMENT_NO
    WHERE S.USER_NO = #{userNo}
</select>

<!-- 학생 등록 -->
    <insert id="insertStudent" parameterType="StudentVO">
        INSERT ALL
            INTO TB_USER (
                USER_NO, USER_NAME, USER_PASS, GENDER, USER_REGNO1, USER_REGNO2,
                USER_TEL, USER_ZIP, USER_ADD1, USER_ADD2, USER_EMAIL, 
                BANK_CD, USER_ROLE, USER_BANKNO
            )
            VALUES (
                #{userNo}, #{userName}, #{userPass}, #{gender}, #{userRegno1}, #{userRegno2},
                #{userTel}, #{userZip}, #{userAdd1}, #{userAdd2}, #{userEmail},
                #{bankCd}, #{userRole}, #{userBankno}
            )
            INTO STUDENT (
                USER_NO, STUDENT_GRADE, STUDENT_NO, STUDENT_EDATE, 
                STUDENT_EMP, DEPARTMENT_NO
            )
            VALUES (
                #{userNo}, #{studentGrade}, #{studentNo}, #{studentEdate},
                #{studentEmp}, #{departmentNo}
            )
        SELECT * FROM DUAL
    </insert>

    <!-- 학생 정보 수정 dd-->
    <update id="modifyStudent" parameterType="StudentVO">
        UPDATE TB_USER SET
            USER_NAME = #{userName},
            USER_EMAIL = #{userEmail},
            USER_TEL = #{userTel},
            USER_ADD1 = #{userAdd1},
            USER_ADD2 = #{userAdd2},
            BANK_CD = #{bankCd},
            USER_BANKNO = #{userBankno}
        WHERE USER_NO = #{userNo};
        
        UPDATE STUDENT SET
            STUDENT_GRADE = #{studentGrade},
            DEPARTMENT_NO = #{departmentNo},
            STUDENT_EMP = #{studentEmp}
        WHERE USER_NO = #{userNo}
    </update>

	<!-- 학생 삭제 -->
	<delete id="deleteStudent" parameterType="String">
		DELETE FROM STUDENT
		WHERE USER_NO = #{userNo};
		DELETE FROM TB_USER WHERE USER_NO =
		#{userNo}
	</delete>

</mapper>