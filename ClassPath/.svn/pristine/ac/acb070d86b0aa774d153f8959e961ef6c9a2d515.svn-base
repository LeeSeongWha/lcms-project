package kr.or.ddit.pfcp.staff.program.controller;

import java.security.Principal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.validation.Valid;
import kr.or.ddit.common.component.NotificationUtils;
import kr.or.ddit.common.util.PdfCertGenerator;
import kr.or.ddit.pfcp.common.service.AtchFileService;
import kr.or.ddit.pfcp.common.service.FileRefService;
import kr.or.ddit.pfcp.common.service.UserService;
import kr.or.ddit.pfcp.common.vo.AtchFileVO;
import kr.or.ddit.pfcp.common.vo.FileRefVO;
import kr.or.ddit.pfcp.common.vo.ProgramCertIssueVO;
import kr.or.ddit.pfcp.common.vo.ProgramCertReqVO;
import kr.or.ddit.pfcp.common.vo.ProgramEnrollVO;
import kr.or.ddit.pfcp.common.vo.ProgramFeedbackVO;
import kr.or.ddit.pfcp.common.vo.ProgramStatisticsVO;
import kr.or.ddit.pfcp.common.vo.ProgramTypeStatVO;
import kr.or.ddit.pfcp.common.vo.ProgramVO;
import kr.or.ddit.pfcp.common.vo.UserVO;
import kr.or.ddit.pfcp.staff.program.service.StaffProgramService;
import kr.or.ddit.pfcp.staff.programStatistics.service.ProgramStatisticsService;
import kr.or.ddit.security.auth.UserVOWrapper;
import lombok.extern.slf4j.Slf4j;

/**
 * @author ${user}
 * @since ${date}
 *
 *        << 개정이력(Modification Information) >> 수정일 | 수정자 | 수정 내용 20250707 | 이상진
 *        | 최초 생성
 */
@Controller
@Slf4j
@RequestMapping("/staff/program")
public class StaffProgramController {

	@Autowired
	private StaffProgramService programService;

	@Autowired
	private UserService userService;

	@Autowired
	private ProgramStatisticsService statisticsService;

	@Autowired
	private AtchFileService atchFileService;

	@Autowired
	private FileRefService fileRefService;

	private UserVO sessionUser;

	@ModelAttribute
	public void setSessionUser(Principal principal) {
		if (principal != null) {
			this.sessionUser = userService.readMember(principal.getName());
		}
	}

	/**
	 * 프로그램 목록 조회
	 * 
	 * @return
	 */
	@GetMapping("programList.do")
	public String listPrograms(Model model, @RequestParam(required = false) String programActive) {
		model.addAttribute("sessionUser", sessionUser);

		// 프로그램 통계 부분

		int programCount = statisticsService.readProgramCount();
		int applicantsCount = statisticsService.readApplicantsCount();
		int countThisMonthApplicants = statisticsService.readCountThisMonthApplicants();
		int calculateCompleteRate = statisticsService.readCalculateCompleteRate();

		ProgramStatisticsVO liveStat = new ProgramStatisticsVO();

		liveStat.setCompleteRate(calculateCompleteRate);
		liveStat.setMonthlyApply(countThisMonthApplicants);
		liveStat.setTotalApplicants(applicantsCount);
		liveStat.setTotalPrograms(programCount);

		ProgramStatisticsVO stat = statisticsService.readStatistics();
		model.addAttribute("stat", stat);
		model.addAttribute("liveStat", liveStat);

		// 프로그램 관리 부분

		// 전체 프로그램(상태 상관 x)
		List<ProgramVO> programList = programService.readProgramList();
		model.addAttribute("programList", programList);
		ProgramVO program = new ProgramVO();
		if (sessionUser != null) {
			program.setUserNo(sessionUser.getUserNo());
		}
		// model.addAttribute("program", program);

		List<ProgramVO> openProgramList = programService.readOpenProgramList();
		model.addAttribute("openProgramList", openProgramList);
		model.addAttribute("typeList", programService.readProgramType());

		return "pfcp/staff/program/programList";
	}

	@GetMapping("/form")
	public String createProgramForm(Model model) {
		ProgramVO program = new ProgramVO();

		// 로그인 사용자 정보 설정
		if (sessionUser != null) {
			program.setUserNo(sessionUser.getUserNo());
		}

		model.addAttribute("program", program);
		model.addAttribute("typeList", programService.readProgramType());
		model.addAttribute("formMode", "insert"); // ✅ 등록 모드 설정
		model.addAttribute("sessionUser", sessionUser);

		return "pfcp/staff/program/programForm";
	}

	/**
	 * 프로그램 수정 폼 진입(상세 조회 포함)
	 * 
	 * @return
	 */
	@GetMapping("/edit/{programNo}")
	public String editProgramForm(@PathVariable String programNo, Model model) {
		ProgramVO program = programService.readProgram(programNo);
		model.addAttribute("program", program);
		model.addAttribute("typeList", programService.readProgramType());
		return "pfcp/staff/program/programForm";
	}

	/**
	 * 프로그램 저장
	 * 
	 * @param program
	 * @param model
	 * @return
	 */

	@PostMapping("/save")
	public String saveProgram(@Valid @ModelAttribute("program") ProgramVO program, BindingResult bindingResult,
			RedirectAttributes redirectAttributes, Model model) {
		if (bindingResult.hasErrors()) {
			model.addAttribute("typeList", programService.readProgramType());
			model.addAttribute("sessionUser", sessionUser);
			return "pfcp/staff/program/programForm";
		}

		String start = program.getStartDate();
		String end = program.getEndDate();

		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

		LocalDate startDate = LocalDate.parse(start, formatter);
		LocalDate endDate = LocalDate.parse(end, formatter);
		log.info("start : {}, end: {}", startDate, endDate);
		if (startDate.isAfter(endDate)) {
			redirectAttributes.addFlashAttribute("errorMessage", "종료일은 시작일보다 같거나 늦어야 합니다.");
			return "redirect:/staff/program/form";
		}

		boolean isNew = (program.getProgramNo() == null || program.getProgramNo().isBlank());

		if (sessionUser != null) {
			program.setUserNo(sessionUser.getUserNo());
		}

		int result = programService.saveProgram(program);

		if (result > 0) {
			redirectAttributes.addFlashAttribute("message", isNew ? "등록 성공" : "수정 성공");
			return "redirect:/staff/program/programList.do";
		} else {
			model.addAttribute("typeList", programService.readProgramType());
			model.addAttribute("sessionUser", sessionUser);
			model.addAttribute("program", program);
			return "pfcp/staff/program/programForm";
		}
	}

	@DeleteMapping("/delete/{programNo}")
	@ResponseBody
	public ResponseEntity<?> deleteProgram(@PathVariable String programNo) {
		int result = programService.deleteProgram(programNo);
		return result > 0 ? ResponseEntity.ok().build()
				: ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}

	// 프로그램 신청자 관리 화면 이동
	@GetMapping("/apply/{programNo}")
	public String applyManagePage(Model model, @PathVariable String programNo) {
		ProgramVO program = programService.readProgramWithEnroll(programNo);

		// enrollList 필터링
		List<ProgramEnrollVO> filteredEnrollList = program.getEnrollList().stream().filter(e -> e.getEnrollNo() != null)
				.collect(Collectors.toList());

		program.setEnrollList(filteredEnrollList); // ← ProgramVO 내부에 다시 설정

		model.addAttribute("program", program); // ← 이제 JSP에서 program.programTitle 정상 사용 가능
		return "pfcp/staff/program/applyManage";
	}

	@PostMapping("/apply/attended")
	@ResponseBody
	public ResponseEntity<?> updateAttended(@RequestBody ProgramEnrollVO enrollVO) {
		int result = programService.updateEnrollAttended(enrollVO);
		return result > 0 ? ResponseEntity.ok().build()
				: ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}

	@PostMapping("/apply/complete")
	@ResponseBody
	public ResponseEntity<?> updateCompletion(@RequestBody ProgramEnrollVO enrollVO) {
		int result = programService.updateEnrollCompletion(enrollVO);
		return result > 0 ? ResponseEntity.ok().build()
				: ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}

	/*
	 * @PostMapping("/apply/issue")
	 * 
	 * @ResponseBody public ResponseEntity<?> issueSimpleCertificate(
	 * 
	 * @RequestParam("enrollNo") String enrollNo ) { int result =
	 * programService.updateEnrollCertIssued(enrollNo); return result > 0 ?
	 * ResponseEntity.ok().build() :
	 * ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); }
	 */
	@GetMapping("/certForm")
	public String certForm(@RequestParam("enrollNo") String enrollNo, Model model) {
		ProgramEnrollVO enroll = programService.readEnrollWithProgramAndCert(enrollNo);
		model.addAttribute("enroll", enroll);
		return "pfcp/staff/program/certForm";
	}

	@PostMapping("/cert/issue")
	@ResponseBody
	public ResponseEntity<?> issueCertificate(
		@RequestBody ProgramCertReqVO certReq,
		@AuthenticationPrincipal UserVOWrapper user
	) {
		try {
			ProgramEnrollVO enroll = programService.readEnrollWithProgramAndCert(certReq.getEnrollNo());
			log.info("{} >>>", enroll);
			String staffNo = user.getUsername();
			if (enroll == null || !"Y".equals(enroll.getIsCompleted())) {
				return ResponseEntity.badRequest().body("이수되지 않은 신청입니다.");
			}

			String studentName = enroll.getStudent() != null ? enroll.getStudent().getUserName() : "이름 없음";
			String programTitle = enroll.getProgram() != null ? enroll.getProgram().getProgramTitle() : "프로그램명 없음";
			String issueDate = enroll.getProgramcert().getCerreqDate();

			log.info(" {}, {}, {}  >>>>>>>>>>>>>>>>>>>>>>>checkng", studentName, programTitle, issueDate);
			byte[] pdfBytes = PdfCertGenerator.generatePdf(studentName, programTitle, issueDate);
			// 3. ATCH_FILE 저장
			String atchId = "ATCH" + System.currentTimeMillis();
			AtchFileVO atchFile = new AtchFileVO();
			atchFile.setAtchId(atchId);
			atchFile.setAtchMime("application/pdf");
			atchFile.setAtchOriginName("certificate_" + certReq.getEnrollNo() + ".pdf");
			atchFile.setAtchSaveName(atchId + "_cert.pdf");
			atchFile.setAtchSize((long) pdfBytes.length);
			atchFile.setAtchDate(LocalDate.now().format(DateTimeFormatter.BASIC_ISO_DATE));
			atchFile.setAtchContent(pdfBytes);
			atchFileService.createAtchFile(atchFile);

			// 4. FILE_REF 저장
			String fileRefNo = "FR" + System.currentTimeMillis();
			FileRefVO fileRef = new FileRefVO();
			fileRef.setFileRefNo(fileRefNo);
			fileRef.setFileRefType("PROGRAM_CERT");
			fileRef.setFileRefTargetId(certReq.getEnrollNo());
			fileRef.setAtchId(atchId);
			fileRefService.createFileRef(fileRef);

			// 5. 발급내역 저장
			ProgramCertIssueVO issue = new ProgramCertIssueVO();
			issue.setCertReqno(enroll.getProgramcert().getCertReqno()); // 이미 신청된 경우
			issue.setIssueDate(LocalDate.now().toString());
			issue.setFileRefNo(fileRefNo);
			issue.setUserNo(staffNo);
			programService.createCertIssue(issue, certReq.getEnrollNo(), certReq.getCertReqno());
			
			NotificationUtils.sendToOneStudent(enroll.getUserNo(), "신청하신 증명서가 발급되었습니다. 증명서 화면에서 확인해주세요.", "#");

			return ResponseEntity.ok().build();
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("이수증 발급 실패");
		}
	}

	@GetMapping("/cert/view/{certReqno}")
	public ResponseEntity<Resource> viewCertPdf(@PathVariable String certReqno) {
		ProgramCertIssueVO issue = programService.readProgramCertIssueWithFile(certReqno);
		if (issue == null || issue.getAtchContent() == null) {
			return ResponseEntity.notFound().build();
		}

		return ResponseEntity.ok().contentType(MediaType.APPLICATION_PDF)
				.header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=\"" + issue.getAtchOriginName() + "\"")
				.body(new ByteArrayResource(issue.getAtchContent()));
	}

	@ResponseBody
	@GetMapping("/donut/data")
	public List<ProgramTypeStatVO> getDonutChartData() {
		return statisticsService.readTypeStat(); // 오늘자 신청자 통계
	}

	@GetMapping("/feedbackList")
	@ResponseBody
	public List<ProgramFeedbackVO> getFeedbackList() {
		return programService.readFeedbackByProgram();
	}

	@GetMapping("/satisfaction/byType")
	@ResponseBody
	public List<Map<String, Object>> getSatisfactionByType() {
		return programService.getFeedbackByprogramType();
	}

}
