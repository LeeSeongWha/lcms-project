package kr.or.ddit.pfcp.staff.requestCollection.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.common.PaginationInfo;
import kr.or.ddit.pfcp.common.vo.AcademicChangeRequestVO;
import kr.or.ddit.pfcp.common.vo.DepartmentVO;
import kr.or.ddit.pfcp.common.vo.ProfessorVO;
import kr.or.ddit.pfcp.common.vo.TypeVO;
import kr.or.ddit.pfcp.staff.professormanage.service.StaffProfessorManageService;
import kr.or.ddit.pfcp.staff.requestCollection.service.StaffRequestService;
import kr.or.ddit.validate.utils.ErrorsUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * @author YSM
 * @since 250724
 * 
 * 
 *        * 수정일 수정자 수정 내용 --------------------------------------- 20250724 양수민
 *        최초 생성
 */

@Slf4j
@Controller
@RequestMapping("/staff/requestCollection")
@RequiredArgsConstructor
public class StaffRequestController {

	private final StaffProfessorManageService professorService;
	private final StaffRequestService requestService;

	static final String MODELNAME = "request";

	@Autowired
	private ErrorsUtils errorsUtils;

	@ModelAttribute(MODELNAME)
	public AcademicChangeRequestVO request() {
		return new AcademicChangeRequestVO();
	}

	@GetMapping("departmentList.do")
	@ResponseBody
	public List<DepartmentVO> departmentList() {
		List<DepartmentVO> departmentList = professorService.readDepartmentList();

		return departmentList;
	}

	/**
	 * 학적 변경 신청 목록 조회 (List)
	 * 
	 * @return
	 */
	@GetMapping("requestCollection.do")
	public String professorList(Model model, @RequestParam(required = false, defaultValue = "1") int page,
			@RequestParam(required = false) String keyword,
			@RequestParam(required = false, defaultValue = "all") String searchType) {
		PaginationInfo paging = new PaginationInfo();

		paging.setCurrentPageNo(page);

		int totalRecordCount;

		Map<String, Object> paramMap = new HashMap<>();

		paramMap.put("keyword", keyword);
		paramMap.put("searchType", searchType);

		if (keyword != null && !keyword.trim().isEmpty()) {
			totalRecordCount = requestService.readRequestTotalCountByKeyword(paramMap);
		} else {
			totalRecordCount = requestService.readRequestTotalCount();
		}

		paging.setTotalRecordCount(totalRecordCount);

		paramMap.put("firstRecordIndex", paging.getFirstRecordIndex());
		paramMap.put("lastRecordIndex", paging.getLastRecordIndex());

		List<AcademicChangeRequestVO> requestList = requestService.readRequestList(paramMap);

		model.addAttribute("requestList", requestList);
		model.addAttribute("count", totalRecordCount);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("searchType", searchType);

		return "pfcp/staff/requestCollection/requestCollection";
	}

}
