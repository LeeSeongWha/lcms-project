package kr.or.ddit.pfcp.staff.schedule.service;

import java.util.List;

import org.springframework.stereotype.Service;

import kr.or.ddit.pfcp.common.vo.ScheduleRefVO;
import kr.or.ddit.pfcp.common.vo.ScheduleVO;
import kr.or.ddit.pfcp.staff.schedule.mapper.ScheduleMapper;
import lombok.RequiredArgsConstructor;

/**
 * @author leesangjin
 * @since 250701
 * 
 *        << 개정이력(Modification Information) >> 수정일 | 수정자 | 수정 내용
 *        ----------------------------------------------- 250630 | 이상진 | 최초 생성
 */
@Service
@RequiredArgsConstructor
public class StaffScheduleServiceImpl implements StaffScheduleService {

	private final ScheduleMapper scheduleMapper;

	/**
	 * 풀캘린더를 가져옴
	 */
	@Override
	public List<ScheduleVO> readScheduleList() {
		return scheduleMapper.selectScheduleWithRef();
	}

	/**
	 * 풀캘린더 유형 검색
	 */
	@Override
	public List<ScheduleRefVO> readScheduleRefType() {
		return scheduleMapper.selectScheduleTypeList();
	}

	/**
	 * 풀캘린더 등록
	 */
	@Override
	public int insertSchedule(ScheduleVO scheduleVO) {
		int result = scheduleMapper.insertSchedule(scheduleVO);

		if (result > 0 && scheduleVO.getRef() != null) {
			ScheduleRefVO ref = scheduleVO.getRef();

			ref.setScheduleNo(scheduleVO.getScheduleNo());

			if (ref.getRefType() != null && !ref.getRefType().isBlank()) {
				scheduleMapper.insertScheduleRef(ref);
			}
		}

		return result;
	}

	/**
	 * 수정
	 */

	@Override
	public int updateSchedule(ScheduleVO scheduleVO) {
	    int result = scheduleMapper.updateSchedule(scheduleVO);

	    if (result > 0 && scheduleVO.getRef() != null) {
	        ScheduleRefVO ref = scheduleVO.getRef();

	        // scheduleNo 매핑 (필수)
	        ref.setScheduleNo(scheduleVO.getScheduleNo());

	        // refType 존재할 때만 update
	        if (ref.getRefType() != null && !ref.getRefType().isBlank()) {
	            scheduleMapper.updateScheduleRef(ref);
	        }
	    }

	    return result;
	}

	@Override
	public int deleteSchedule(String ScheduleNo) {
		
		int count = scheduleMapper.selectScheduleCount(ScheduleNo);
		
	    if(count< 1) {
	    	throw new IllegalArgumentException("일정이 존재하지 않습니다.");
	    }
		
	    //  참조 테이블 삭제 → 메인 테이블 삭제
	    scheduleMapper.deleteScheduleRef(ScheduleNo);
	    int cnt =scheduleMapper.deleteSchedule(ScheduleNo);
		return cnt;
	}

	@Override
	public ScheduleVO selectSchedule(String ScheduleNo) {
		 return scheduleMapper.selectSchedule(ScheduleNo);
		
	}

}
