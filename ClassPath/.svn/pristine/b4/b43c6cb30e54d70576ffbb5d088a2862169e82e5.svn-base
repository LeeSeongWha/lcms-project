package kr.or.ddit.pfcp.staff.certification.controller;

import java.io.OutputStream;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.itextpdf.io.exceptions.IOException;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import kr.or.ddit.pfcp.common.service.AtchFileService;
import kr.or.ddit.pfcp.common.service.FileRefService;
import kr.or.ddit.pfcp.common.vo.AtchFileVO;
import kr.or.ddit.pfcp.common.vo.CertificateInfoVO;
import kr.or.ddit.pfcp.common.vo.FileRefVO;
import kr.or.ddit.pfcp.staff.certification.service.StaffCertificationService;
import kr.or.ddit.validate.utils.ErrorsUtils;
import lombok.extern.slf4j.Slf4j;

/**
 * @author YSM
 * @since 250630
 */
@Slf4j
@Controller
@RequestMapping("/staff/certification")
public class StaffCertificationController {
	
	@Autowired
	private StaffCertificationService staffCertificationService;
	
	@Autowired
	private FileRefService fileRefService;
	
	@Autowired
	private AtchFileService atchFileService;
	
	static final String MODELNAME = "certification";
	
	@Autowired
	private ErrorsUtils errorsUtils;
	
	@ModelAttribute(MODELNAME)
	public CertificateInfoVO certification() {
		return new CertificateInfoVO();
	}

	/**
	 * 증명서 폼 목록 전체 조회
	 * @return
	 */
	@GetMapping("certificationFormList.do")
	public String certificationFormListUI(Model model) {
		List<CertificateInfoVO> certificationList = staffCertificationService.readCertificationList();
		model.addAttribute("certificationList", certificationList);
		
		int totalCount = certificationList.size();
		model.addAttribute("totalCount", totalCount);
		
		return "pfcp/staff/certification/certificationFormList";
	}
	
	/**
	 * 증명서 폼 목록 등록
	 * @return
	 * @throws java.io.IOException 
	 */
	@PostMapping("certificationFormInsertProcess.do")
	public String certificationFormInsertUI(
		Model model,
		@ModelAttribute(MODELNAME) CertificateInfoVO certificateInfo,
		BindingResult errors,
		RedirectAttributes redirectAttributes
	) throws java.io.IOException {
		// -------------------------------
        // 파일 처리 시작!
        // -------------------------------
		MultipartFile file = certificateInfo.getUploadFile();
		
		if (file != null && !file.isEmpty()) {
			// ID 생성
            String atchId = "ATCH" + System.currentTimeMillis();
            String fileRefNo = "FR" + System.currentTimeMillis();
            
            byte[] fileBytes = file.getBytes();

            // ATCH_FILE insert
            AtchFileVO atchFile = new AtchFileVO();
            atchFile.setAtchId(atchId);
            atchFile.setAtchMime(file.getContentType());
            atchFile.setAtchOriginName(file.getOriginalFilename());
            atchFile.setAtchSaveName(atchId + "_" + file.getOriginalFilename());
            atchFile.setAtchSize(file.getSize());
            atchFile.setAtchDate(LocalDate.now().format(DateTimeFormatter.BASIC_ISO_DATE));
            atchFile.setAtchContent(fileBytes);
            
            atchFileService.createAtchFile(atchFile);
            
            // FILE_REF insert
            FileRefVO fileRef = new FileRefVO();
            fileRef.setFileRefNo(fileRefNo);
            fileRef.setFileRefType("CERTIFICATION_FORM");
            fileRef.setFileRefTargetId(certificateInfo.getCertCode());
            fileRef.setAtchId(atchId);
            
            fileRefService.createFileRef(fileRef);
            
            certificateInfo.setFileRefNo(fileRefNo);
            
            String certCode = certificateInfo.getCertCode();
            staffCertificationService.modifyFileRefNo(certCode, fileRefNo);
            
            log.info("fileRefNo : {}", fileRefNo);
            log.info("여기까지 옴..??");
		}
		// -------------------------------
        // 파일 처리 끝!
        // -------------------------------
		
		
		
		return "redirect:/staff/certification/certificationFormList.do";
	}
	
	
	
	/**
	 * 증명서 폼 목록 pdf 불러오기
	 * @return
	 * @throws java.io.IOException 
	 */
	@GetMapping("serveCertificationFormPdf.do")
	@ResponseBody
	public void certificationFormPdfUI(
			@RequestParam("certCode") String certCode, 
			HttpServletResponse response,
			HttpServletRequest request
	) throws IOException, java.io.IOException {
		
	    try {
	        response.setContentType("application/pdf");
	        response.setHeader("Content-Disposition", "inline; filename=certification.pdf");
	        
	        String fileRefNo = staffCertificationService.readFileRefNo(certCode);
	        
	        log.info("certCode: {}", certCode);	 
	        log.info("fileRefNo: {}", fileRefNo);
	        log.info("왔느뇨....");

	        // 1. DB에서 템플릿 PDF 바이트 가져오기
	        FileRefVO fileRef = fileRefService.readFileRef(fileRefNo);
	        
	        log.info("여기까찌 왔니");
			
			if (fileRef == null) {
		        throw new RuntimeException("파일 참조 정보가 없습니다.");
		    }
			
			String atchId = fileRef.getAtchId();
			
			// ATCH_FILE에서 파일 정보 가져오기
		    AtchFileVO atchFile = atchFileService.readAtchFile(atchId);
		    
		    if (atchFile == null || atchFile.getAtchContent() == null) {
		        throw new RuntimeException("파일 정보가 없습니다.");
		    }
		    
		    // 응답 헤더 설정
		    response.setContentType(atchFile.getAtchMime());
		    response.setHeader("Content-Disposition", "attachment; filename=\"" + 
		        new String(atchFile.getAtchOriginName().getBytes("UTF-8"), "ISO-8859-1") + "\"");
		    response.setContentLength((int) atchFile.getAtchSize());

		    // 파일 데이터 쓰기
		    try (OutputStream out = response.getOutputStream()) {
		        out.write(atchFile.getAtchContent());
		        out.flush();
		    }
		    


	    } catch (Exception e) {
	        e.printStackTrace();
	        response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	        
	        try {
	            RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/views/error/fileLoadFail.jsp");
	            dispatcher.forward(request, response);
	        } catch (Exception f) {
	            f.printStackTrace();
	            response.getWriter().write("PDF 파일을 불러올 수 없습니다. 오류: " + e.getMessage());
	        }
	    }
	}


	
	
	
	
	@GetMapping("/cert/student")
	public void generateStudentCertificate(@RequestParam String studentId, HttpServletResponse response)
			throws IOException {
		staffCertificationService.generateStudentCertificateById(studentId, response);
	}

	// ======================================================================================
	
	
	
	/**
	 * 증명서 폼 상세 조회
	 * @return
	 */
	@GetMapping("certificationFormDetail.do")
	public String certificationFormDetailUI() {
		return "pfcp/staff/certification/certificationFormDetail";
	}
	
	/**
	 * 증명서 폼 등록
	 * @return
	 */
	@GetMapping("certificationFormInsert.do")
	public String certificationFormInsertUI() {
		return "pfcp/staff/certification/certificationFormInsert";
	}
	
	/**
	 * 증명서 폼 수정
	 * @return
	 */
	@GetMapping("certificationFormUpdate.do")
	public String certificationFormUpdateUI() {
		return "pfcp/staff/certification/certificationFormDetail";
	}
}
